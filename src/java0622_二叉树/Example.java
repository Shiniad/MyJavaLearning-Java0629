package java0622_二叉树;
/**
 * 一维线性结构
 * 队列：可以理解为先进先出的动态数组，类似于排队，
 * 栈：实际上是一种先进先出的数据结构，程序栈是程序调用方法中方法中定义的局部变量的存放空间，类似羽毛球筒
 * 链表：链条，一个数据通过引用关联到另外一个数据(有单向链表，有双向链表，有环形链表等)，链表插入和删除元素特别方便
 * 堆：数据存储结构，特点是无序，二叉堆（用二叉树管理的堆），队列和栈都可以自动回收，但是堆不行
 * 
 * 树：n个节点组成的有限集合，树的算法应用非常广泛。(节点就是一个数据)
 * 图：有穷节点和边的总和，最难的是图的算法。
 * 
 * # 树：树是有限个节点和所有节点的前驱和后继关系的总和
 * 
 * 祖先节点，后代节点：父结点以及父节点的父节点/子节点以及子节点的子节点
 * 
 * 根节点：有后继无前驱的节点，根节点只能有一个，且必须有一个，任何一个其它节点只能有一个父节点
 * 叶节点：有前驱无后继的节点，叶节点至少要有一个
 * 
 * 度：节点的子节点数(二度即为二叉树)
 * 深度：节点的层次总数
 * 
 * 有序树：左边的子节点比父节点小，右边的子节点比父节点大
 * 
 * 树的应用： 
 * XML是一种数据标记语言
 * 其标签就是树的结点
 * 一个XML就是一棵树
 * HTML是特殊的XML
 * 文件系统也是树结构(树形菜单)
 * 网页的导航菜单也是树结构
 * 
 * 二叉树Binary Tree和快速检索： 二分查找 树查找 数据索引
 * 数据索引：目录
 * 红黑树是一种特殊的平衡树，平衡树是一种特殊的搜索树，搜索树是一种特殊的二叉树
 * 
 * ##二叉树
 * 所有节点的度都不大于2的树 常用于快速查找
 * 空二叉树：只有一个根节点的二叉树
 * 满二叉树(完美二叉树)：除叶节点外所有的节点都有且只有2个子节点，而且所有的叶节点都处于二叉树的最底部一层
 * 完全二叉树：除了最底下一层，其它各层的节点数都达到最大个数，最后一层的叶节都是从左到右排列
 * 平衡二叉树：任意节点的左右子树高度差最多为1(平衡二叉树因将所有的数据均匀地分布，所以查找数据快)
 * 
 * 二叉树的基本性质
 * 二叉树的第n层总节点数最大为2^(n-1)
 * 二叉树的最多节点数为2^h-1,h为二叉树的深度
 * 二叉树的总节点数最小为h,h为深度
 * 具有n个结点的完全二叉树的深度为(int)(log(2)n) + 1
 * 
 * #二叉树的实现
 */
public class Example {

	public static void main(String[] args) {

	}

}
